diff --git a/src/App/PropertyFile.cpp b/src/App/PropertyFile.cpp
index d5d9292..01ea4a5 100644
--- a/src/App/PropertyFile.cpp
+++ b/src/App/PropertyFile.cpp
@@ -252,7 +252,6 @@ PyObject *PropertyFileIncluded::getPyObject(void)
 }
 
 #if PY_MAJOR_VERSION >= 3
-extern PyTypeObject PyFileIO_Type;
 namespace App {
 const char* getNameFromFile(PyObject* value)
 {
@@ -272,6 +271,16 @@ const char* getNameFromFile(PyObject* value)
         throw Base::TypeError("Unable to get filename");
     return string;
 }
+
+bool isIOFile(PyObject* file)
+{
+    PyObject* io = PyImport_ImportModule("io");
+    PyObject* IOBase_Class = PyObject_GetAttrString(io, "IOBase");
+    bool isFile = PyObject_IsInstance(value, IOBase_Class);
+    Py_DECREF(IOBase_Class);
+    Py_DECREF(io);
+    return isFile;
+}
 }
 #endif
 
@@ -285,7 +294,7 @@ void PropertyFileIncluded::setPyObject(PyObject *value)
     else if (PyBytes_Check(value)) {
         string = PyBytes_AsString(value);
     }
-    else if (PyObject_IsInstance(value, (PyObject *)&PyFileIO_Type) == 1) {
+    else if isIOFile(value){
         string = getNameFromFile(value);
     }
 #else
@@ -318,7 +327,7 @@ void PropertyFileIncluded::setPyObject(PyObject *value)
         else if (PyBytes_Check(file)) {
             fileStr = PyBytes_AsString(file);
         }
-        else if(PyObject_IsInstance(file, (PyObject *)&PyFileIO_Type) == 1) {
+        else if isIOFile(value) {
             fileStr = getNameFromFile(file);
         }
 #else
@@ -335,9 +344,9 @@ void PropertyFileIncluded::setPyObject(PyObject *value)
             fileStr = PyString_AsString(FileName);
         }
 #endif
-        else {
+        else {
             std::string error = std::string("First item in tuple must be a file or string, not ");
-            error += file->ob_type->tp_name;
+            error += file->ob_type->tp_name;
             throw Base::TypeError(error);
         }
 
@@ -350,7 +359,7 @@ void PropertyFileIncluded::setPyObject(PyObject *value)
         else if (PyBytes_Check(name)) {
             nameStr = PyBytes_AsString(name);
         }
-        else if(PyObject_IsInstance(name, (PyObject *)&PyFileIO_Type) == 1) {
+        else if isIOFile(value) {
             nameStr = getNameFromFile(name);
         }
 #else
@@ -362,9 +371,9 @@ void PropertyFileIncluded::setPyObject(PyObject *value)
             nameStr = PyString_AsString(FileName);
         }
 #endif
-        else {
+        else {
             std::string error = std::string("Second item in tuple must be a string, not ");
-            error += name->ob_type->tp_name;
+            error += name->ob_type->tp_name;
             throw Base::TypeError(error);
         }
 
