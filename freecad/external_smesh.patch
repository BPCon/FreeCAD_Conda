diff --git a/CMakeLists.txt b/CMakeLists.txt
index cc06f9086..881182f5a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -724,14 +724,17 @@ endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
             endif()
             find_package(MEDFile REQUIRED)
             set(SMESH_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/src/3rdParty/salomesmesh/inc)
-        else()
-            find_package(SMESH)
+        else(NOT FREECAD_USE_EXTERNAL_SMESH)
+            find_package(SMESH CONFIG REQUIRED)
+            include_directories(${SMESH_INCLUDE_DIR})
+            link_directories(${SMESH_LIB_PATH})
+            SET(EXTERNAL_SMESH_LIBS ${SMESH_LIBRARIES})
+            add_definitions(-DHAVE_NETGEN)
             if(NOT SMESH_FOUND)
                 message(ERROR "================\n"
                               "SMESH not found.\n"
                               "================\n")
             endif()
-            include_directories(${SMESH_INCLUDE_DIR})
         endif()
         set(SMESH_FOUND TRUE)
     ENDIF(BUILD_SMESH)
diff --git a/src/Mod/Fem/App/AppFem.cpp b/src/Mod/Fem/App/AppFem.cpp
index e4d7accdd..4469f2eb6 100644
--- a/src/Mod/Fem/App/AppFem.cpp
+++ b/src/Mod/Fem/App/AppFem.cpp
@@ -119,7 +119,7 @@ PyMOD_INIT_FUNC(Fem)
     Fem::StdMeshers_SegmentAroundVertex_0DPy    ::init_type(femModule);
     Fem::StdMeshers_SegmentLengthAroundVertexPy ::init_type(femModule);
     Fem::StdMeshers_StartEndLengthPy            ::init_type(femModule);
-    Fem::StdMeshers_TrianglePreferencePy        ::init_type(femModule);
+//     Fem::StdMeshers_TrianglePreferencePy        ::init_type(femModule);
     Fem::StdMeshers_Hexa_3DPy                   ::init_type(femModule);
 
     // Add Types to module
diff --git a/src/Mod/Fem/App/AppFemPy.cpp b/src/Mod/Fem/App/AppFemPy.cpp
index 47554facb..7a4c66200 100644
--- a/src/Mod/Fem/App/AppFemPy.cpp
+++ b/src/Mod/Fem/App/AppFemPy.cpp
@@ -50,7 +50,7 @@
 #include <StdMeshers_LocalLength.hxx>
 #include <StdMeshers_NumberOfSegments.hxx>
 #include <StdMeshers_AutomaticLength.hxx>
-#include <StdMeshers_TrianglePreference.hxx>
+// #include <StdMeshers_TrianglePreference.hxx>
 #include <StdMeshers_MEFISTO_2D.hxx>
 #include <StdMeshers_Deflection1D.hxx>
 #include <StdMeshers_MaxElementArea.hxx>
diff --git a/src/Mod/Fem/App/CMakeLists.txt b/src/Mod/Fem/App/CMakeLists.txt
index b69fad687..cd4bba85e 100644
--- a/src/Mod/Fem/App/CMakeLists.txt
+++ b/src/Mod/Fem/App/CMakeLists.txt
@@ -181,7 +181,7 @@ SET(Fem_SRCS
 
 
 add_library(Fem SHARED ${Fem_SRCS})
-target_link_libraries(Fem ${Fem_LIBS} ${VTK_LIBRARIES})
+target_link_libraries(Fem ${Fem_LIBS} ${VTK_LIBRARIES} ${EXTERNAL_SMESH_LIBS})
 
 
 SET_BIN_DIR(Fem Fem /Mod/Fem)
diff --git a/src/Mod/Fem/App/FemMesh.cpp b/src/Mod/Fem/App/FemMesh.cpp
index c53083c5f..68ecd48f6 100644
--- a/src/Mod/Fem/App/FemMesh.cpp
+++ b/src/Mod/Fem/App/FemMesh.cpp
@@ -54,15 +54,16 @@
 #endif
 
 #include <boost/assign/list_of.hpp>
-#include <SMESH_Gen.hxx>
 #include <SMESH_Mesh.hxx>
 #include <SMESH_MeshEditor.hxx>
+#include <SMESH_Gen.hxx>
 #include <SMESH_Group.hxx>
 #include <SMDS_MeshGroup.hxx>
 #include <SMESHDS_GroupBase.hxx>
 #include <SMESHDS_Group.hxx>
 #include <SMDS_PolyhedralVolumeOfNodes.hxx>
 #include <SMDS_VolumeTool.hxx>
+#include <SMESHDS_Mesh.hxx>
 #include <StdMeshers_MaxLength.hxx>
 #include <StdMeshers_LocalLength.hxx>
 #include <StdMeshers_MaxElementArea.hxx>
@@ -89,9 +90,11 @@ using namespace Base;
 using namespace boost;
 
 static int StatCount = 0;
+SMESH_Gen* FemMesh::_mesh_gen = 0;
 
 TYPESYSTEM_SOURCE(Fem::FemMesh , Base::Persistence);
 
+
 FemMesh::FemMesh()
 {
     //Base::Console().Log("FemMesh::FemMesh():%p (id=%i)\n",this,StatCount);
@@ -489,7 +492,9 @@ SMESH_Mesh* FemMesh::getSMesh()
 
 SMESH_Gen * FemMesh::getGenerator()
 {
-    return SMESH_Gen::get();
+    if (! FemMesh::_mesh_gen)
+	FemMesh::_mesh_gen = new SMESH_Gen();
+    return FemMesh::_mesh_gen;
 }
 
 void FemMesh::addHypothesis(const TopoDS_Shape & aSubShape, SMESH_HypothesisPtr hyp)
@@ -1155,11 +1160,11 @@ void FemMesh::read(const char *FileName)
         // read brep-file
         myMesh->STLToMesh(File.filePath().c_str());
     }
-    else if (File.hasExtension("dat") ) {
-        // read brep-file
-    // vejmarie disable
-        myMesh->DATToMesh(File.filePath().c_str());
-    }
+//     else if (File.hasExtension("dat") ) {
+//         // read brep-file
+//     // vejmarie disable
+//         myMesh->DATToMesh(File.filePath().c_str());
+//     }
     else if (File.hasExtension("bdf") ) {
         // read Nastran-file
         readNastran(File.filePath());
diff --git a/src/Mod/Fem/App/FemMesh.h b/src/Mod/Fem/App/FemMesh.h
index dfe2a71c1..d1c25da8a 100644
--- a/src/Mod/Fem/App/FemMesh.h
+++ b/src/Mod/Fem/App/FemMesh.h
@@ -46,6 +46,7 @@ namespace Fem
 
 typedef boost::shared_ptr<SMESH_Hypothesis> SMESH_HypothesisPtr;
 
+
 /** The representation of a FemMesh
  */
 class AppFemExport FemMesh : public Data::ComplexGeoData
@@ -56,6 +57,7 @@ public:
     FemMesh();
     FemMesh(const FemMesh&);
     ~FemMesh();
+    
 
     FemMesh &operator=(const FemMesh&);
     const SMESH_Mesh* getSMesh() const;
@@ -158,8 +160,8 @@ private:
     /// positioning matrix
     Base::Matrix4D _Mtrx;
     SMESH_Mesh *myMesh;
-
     std::list<SMESH_HypothesisPtr> hypoth;
+    static SMESH_Gen *_mesh_gen;
 };
 
 } //namespace Part
diff --git a/src/Mod/Fem/App/FemMeshPyImp.cpp b/src/Mod/Fem/App/FemMeshPyImp.cpp
index 695ed5363..6afef7c92 100644
--- a/src/Mod/Fem/App/FemMeshPyImp.cpp
+++ b/src/Mod/Fem/App/FemMeshPyImp.cpp
@@ -37,6 +37,7 @@
 #include <SMDSAbs_ElementType.hxx>
 #include <SMDS_MeshElement.hxx>
 #include <SMDS_VolumeTool.hxx>
+#include <SMESHDS_Mesh.hxx>
 
 #include <TopoDS_Shape.hxx>
 #include <TopoDS_Face.hxx>
diff --git a/src/Mod/Fem/App/FemMeshShapeNetgenObject.cpp b/src/Mod/Fem/App/FemMeshShapeNetgenObject.cpp
index 95d5a0e20..8f9c7a0c5 100644
--- a/src/Mod/Fem/App/FemMeshShapeNetgenObject.cpp
+++ b/src/Mod/Fem/App/FemMeshShapeNetgenObject.cpp
@@ -43,6 +43,7 @@
     #include <NETGENPlugin_SimpleHypothesis_3D.hxx>
     #include <NETGENPlugin_Hypothesis.hxx>
     #include <NETGENPlugin_Mesher.hxx>
+    #include <SMESHDS_Mesh.hxx>
 #endif
 
 #include <BRepBuilderAPI_Copy.hxx>
diff --git a/src/Mod/Fem/App/FemMeshShapeObject.cpp b/src/Mod/Fem/App/FemMeshShapeObject.cpp
index ac0c3b6e7..8d543d771 100644
--- a/src/Mod/Fem/App/FemMeshShapeObject.cpp
+++ b/src/Mod/Fem/App/FemMeshShapeObject.cpp
@@ -61,7 +61,7 @@
 #include <StdMeshers_QuadraticMesh.hxx>
 #include <StdMeshers_RadialPrism_3D.hxx>
 #include <StdMeshers_SegmentAroundVertex_0D.hxx>
-#include <StdMeshers_TrianglePreference.hxx>
+// #include <StdMeshers_TrianglePreference.hxx>
 #include <StdMeshers_ProjectionSource1D.hxx>
 #include <StdMeshers_ProjectionSource2D.hxx>
 #include <StdMeshers_ProjectionSource3D.hxx>
diff --git a/src/Mod/Fem/App/FemVTKTools.cpp b/src/Mod/Fem/App/FemVTKTools.cpp
index 40fa0730e..92bd9b893 100644
--- a/src/Mod/Fem/App/FemVTKTools.cpp
+++ b/src/Mod/Fem/App/FemVTKTools.cpp
@@ -53,6 +53,7 @@
 #include <SMESH_Mesh.hxx>
 #include <SMDS_PolyhedralVolumeOfNodes.hxx>
 #include <SMDS_VolumeTool.hxx>
+#include <SMESHDS_Mesh.hxx>
 
 # include <TopoDS_Face.hxx>
 # include <TopoDS_Solid.hxx>
diff --git a/src/Mod/Fem/App/HypothesisPy.cpp b/src/Mod/Fem/App/HypothesisPy.cpp
index 44babab6c..ac4a15ab8 100755
--- a/src/Mod/Fem/App/HypothesisPy.cpp
+++ b/src/Mod/Fem/App/HypothesisPy.cpp
@@ -53,7 +53,7 @@
 #include <StdMeshers_QuadraticMesh.hxx>
 #include <StdMeshers_RadialPrism_3D.hxx>
 #include <StdMeshers_SegmentAroundVertex_0D.hxx>
-#include <StdMeshers_TrianglePreference.hxx>
+// #include <StdMeshers_TrianglePreference.hxx>
 #include <StdMeshers_ProjectionSource1D.hxx>
 #include <StdMeshers_ProjectionSource2D.hxx>
 #include <StdMeshers_ProjectionSource3D.hxx>
@@ -87,11 +87,11 @@ void SMESH_HypothesisPy<T>::init_type(PyObject* module)
 
     SMESH_HypothesisPy::add_varargs_method("setLibName", &SMESH_HypothesisPy<T>::setLibName, "setLibName(String)");
     SMESH_HypothesisPy::add_varargs_method("getLibName", &SMESH_HypothesisPy<T>::getLibName, "String getLibName()");
-    SMESH_HypothesisPy::add_varargs_method("setParameters", &SMESH_HypothesisPy<T>::setParameters, "setParameters(String)");
+    /*SMESH_HypothesisPy::add_varargs_method("setParameters", &SMESH_HypothesisPy<T>::setParameters, "setParameters(String)");
     SMESH_HypothesisPy::add_varargs_method("getParameters", &SMESH_HypothesisPy<T>::getParameters, "String getParameters()");
     SMESH_HypothesisPy::add_varargs_method("setLastParameters", &SMESH_HypothesisPy<T>::setLastParameters, "setLastParameters(String)");
     SMESH_HypothesisPy::add_varargs_method("getLastParameters", &SMESH_HypothesisPy<T>::getLastParameters, "String getLastParameters()");
-    SMESH_HypothesisPy::add_varargs_method("clearParameters", &SMESH_HypothesisPy<T>::clearParameters, "clearParameters()");
+    SMESH_HypothesisPy::add_varargs_method("clearParameters", &SMESH_HypothesisPy<T>::clearParameters, "clearParameters()"); */
     SMESH_HypothesisPy::add_varargs_method("isAuxiliary", &SMESH_HypothesisPy<T>::isAuxiliary, "Bool isAuxiliary()");
     SMESH_HypothesisPy::add_varargs_method("setParametersByMesh", &SMESH_HypothesisPy<T>::setParametersByMesh, "setParametersByMesh(Mesh,Shape)");
     Base::Interpreter().addType(SMESH_HypothesisPy<T>::behaviors().type_object(),
@@ -140,48 +140,48 @@ Py::Object SMESH_HypothesisPy<T>::getLibName(const Py::Tuple& args)
     return Py::String(hypothesis<SMESH_Hypothesis>()->GetLibName());
 }
 
-template<class T>
-Py::Object SMESH_HypothesisPy<T>::setParameters(const Py::Tuple& args)
-{
-    std::string paramName = (std::string)Py::String(args[0]);
-    hypothesis<SMESH_Hypothesis>()->SetParameters(paramName.c_str());
-    return Py::None();
-}
-
-template<class T>
-Py::Object SMESH_HypothesisPy<T>::getParameters(const Py::Tuple& args)
-{
-    if (!PyArg_ParseTuple(args.ptr(), ""))
-        throw Py::Exception();
-    return Py::String(hypothesis<SMESH_Hypothesis>()->GetParameters());
-}
-
-template<class T>
-Py::Object SMESH_HypothesisPy<T>::setLastParameters(const Py::Tuple& args)
-{
-    if (!PyArg_ParseTuple(args.ptr(), ""))
-        throw Py::Exception();
-    std::string paramName = (std::string)Py::String(args[0]);
-    hypothesis<SMESH_Hypothesis>()->SetLastParameters(paramName.c_str());
-    return Py::None();
-}
-
-template<class T>
-Py::Object SMESH_HypothesisPy<T>::getLastParameters(const Py::Tuple& args)
-{
-    if (!PyArg_ParseTuple(args.ptr(), ""))
-        throw Py::Exception();
-    return Py::String(hypothesis<SMESH_Hypothesis>()->GetLastParameters());
-}
-
-template<class T>
-Py::Object SMESH_HypothesisPy<T>::clearParameters(const Py::Tuple& args)
-{
-    if (!PyArg_ParseTuple(args.ptr(), ""))
-        throw Py::Exception();
-    hypothesis<SMESH_Hypothesis>()->ClearParameters();
-    return Py::None();
-}
+// template<class T>
+// Py::Object SMESH_HypothesisPy<T>::setParameters(const Py::Tuple& args)
+// {
+//     std::string paramName = (std::string)Py::String(args[0]);
+//     hypothesis<SMESH_Hypothesis>()->SetParameters(paramName.c_str());
+//     return Py::None();
+// }
+
+// template<class T>
+// Py::Object SMESH_HypothesisPy<T>::getParameters(const Py::Tuple& args)
+// {
+//     if (!PyArg_ParseTuple(args.ptr(), ""))
+//         throw Py::Exception();
+//     return Py::String(hypothesis<SMESH_Hypothesis>()->GetParameters());
+// }
+
+// template<class T>
+// Py::Object SMESH_HypothesisPy<T>::setLastParameters(const Py::Tuple& args)
+// {
+//     if (!PyArg_ParseTuple(args.ptr(), ""))
+//         throw Py::Exception();
+//     std::string paramName = (std::string)Py::String(args[0]);
+//     hypothesis<SMESH_Hypothesis>()->SetLastParameters(paramName.c_str());
+//     return Py::None();
+// }
+
+// template<class T>
+// Py::Object SMESH_HypothesisPy<T>::getLastParameters(const Py::Tuple& args)
+// {
+//     if (!PyArg_ParseTuple(args.ptr(), ""))
+//         throw Py::Exception();
+//     return Py::String(hypothesis<SMESH_Hypothesis>()->GetLastParameters());
+// }
+
+// template<class T>
+// Py::Object SMESH_HypothesisPy<T>::clearParameters(const Py::Tuple& args)
+// {
+//     if (!PyArg_ParseTuple(args.ptr(), ""))
+//         throw Py::Exception();
+//     hypothesis<SMESH_Hypothesis>()->ClearParameters();
+//     return Py::None();
+// }
 
 template<class T>
 Py::Object SMESH_HypothesisPy<T>::setParametersByMesh(const Py::Tuple& args)
@@ -646,21 +646,21 @@ StdMeshers_Hexa_3DPy::~StdMeshers_Hexa_3DPy()
 
 // ----------------------------------------------------------------------------
 
-void StdMeshers_TrianglePreferencePy::init_type(PyObject* module)
-{
-    behaviors().name("StdMeshers_TrianglePreference");
-    behaviors().doc("StdMeshers_TrianglePreference");
-    SMESH_HypothesisPyBase::init_type(module);
-}
-
-StdMeshers_TrianglePreferencePy::StdMeshers_TrianglePreferencePy(int hypId, int studyId, SMESH_Gen* gen)
-  : SMESH_HypothesisPyBase(new StdMeshers_TrianglePreference(hypId, studyId, gen))
-{
-}
-
-StdMeshers_TrianglePreferencePy::~StdMeshers_TrianglePreferencePy()
-{
-}
+// void StdMeshers_TrianglePreferencePy::init_type(PyObject* module)
+// {
+//     behaviors().name("StdMeshers_TrianglePreference");
+//     behaviors().doc("StdMeshers_TrianglePreference");
+//     SMESH_HypothesisPyBase::init_type(module);
+// }
+
+// StdMeshers_TrianglePreferencePy::StdMeshers_TrianglePreferencePy(int hypId, int studyId, SMESH_Gen* gen)
+//   : SMESH_HypothesisPyBase(new StdMeshers_TrianglePreference(hypId, studyId, gen))
+// {
+// }
+
+// StdMeshers_TrianglePreferencePy::~StdMeshers_TrianglePreferencePy()
+// {
+// }
 
 // ----------------------------------------------------------------------------
 
diff --git a/src/Mod/Fem/App/HypothesisPy.h b/src/Mod/Fem/App/HypothesisPy.h
index 8c1cde7e9..5e62015f2 100755
--- a/src/Mod/Fem/App/HypothesisPy.h
+++ b/src/Mod/Fem/App/HypothesisPy.h
@@ -60,11 +60,11 @@ public:
     Py::Object repr();
     Py::Object getLibName(const Py::Tuple& args);
     Py::Object setLibName(const Py::Tuple& args);
-    Py::Object setParameters(const Py::Tuple& args);
-    Py::Object getParameters(const Py::Tuple& args);
-    Py::Object setLastParameters(const Py::Tuple& args);
-    Py::Object getLastParameters(const Py::Tuple& args);
-    Py::Object clearParameters(const Py::Tuple& args);
+//     Py::Object setParameters(const Py::Tuple& args);
+//     Py::Object getParameters(const Py::Tuple& args);
+//     Py::Object setLastParameters(const Py::Tuple& args);
+//     Py::Object getLastParameters(const Py::Tuple& args);
+//     Py::Object clearParameters(const Py::Tuple& args);
     Py::Object isAuxiliary(const Py::Tuple& args);
     Py::Object setParametersByMesh(const Py::Tuple& args);
 
@@ -220,13 +220,13 @@ public:
     ~StdMeshers_Hexa_3DPy();
 };
 
-class StdMeshers_TrianglePreferencePy : public SMESH_HypothesisPy<StdMeshers_TrianglePreferencePy>
-{
-public:
-    static void init_type(PyObject*);
-    StdMeshers_TrianglePreferencePy(int hypId, int studyId, SMESH_Gen* gen);
-    ~StdMeshers_TrianglePreferencePy();
-};
+// class StdMeshers_TrianglePreferencePy : public SMESH_HypothesisPy<StdMeshers_TrianglePreferencePy>
+// {
+// public:
+//     static void init_type(PyObject*);
+//     StdMeshers_TrianglePreferencePy(int hypId, int studyId, SMESH_Gen* gen);
+//     ~StdMeshers_TrianglePreferencePy();
+// };
 
 class StdMeshers_StartEndLengthPy : public SMESH_HypothesisPy<StdMeshers_StartEndLengthPy>
 {
diff --git a/src/Mod/Mesh/App/Core/Curvature.cpp b/src/Mod/Mesh/App/Core/Curvature.cpp
index a517bd5ed..64e790226 100644
--- a/src/Mod/Mesh/App/Core/Curvature.cpp
+++ b/src/Mod/Mesh/App/Core/Curvature.cpp
@@ -27,7 +27,7 @@
 
 #include <QFuture>
 #include <QFutureWatcher>
-#include <QtConcurrentMap>
+#include <QtConcurrent/QtConcurrentMap>
 #include <boost/bind.hpp>
 
 //#define OPTIMIZE_CURVATURE
diff --git a/src/Mod/MeshPart/App/CMakeLists.txt b/src/Mod/MeshPart/App/CMakeLists.txt
index d3efec98f..3057550fa 100644
--- a/src/Mod/MeshPart/App/CMakeLists.txt
+++ b/src/Mod/MeshPart/App/CMakeLists.txt
@@ -31,10 +31,10 @@ if(BUILD_FEM_NETGEN)
     set(MeshPart_LIBS
         Part
         Mesh
-        StdMeshers
-        NETGENPlugin
-        SMESH
-        SMDS
+#         StdMeshers
+#         NETGENPlugin
+#         SMESH
+#         SMDS
     )
 elseif(BUILD_SMESH)
     set(MeshPart_LIBS
@@ -66,7 +66,7 @@ SET(MeshPart_SRCS
 )
 
 add_library(MeshPart SHARED ${MeshPart_SRCS})
-target_link_libraries(MeshPart ${MeshPart_LIBS})
+target_link_libraries(MeshPart ${MeshPart_LIBS} ${EXTERNAL_SMESH_LIBS} SMESH)
 
 
 fc_target_copy_resource(MeshPart 
diff --git a/src/Mod/MeshPart/App/Mesher.cpp b/src/Mod/MeshPart/App/Mesher.cpp
index 5c181ca8b..764e7fa80 100644
--- a/src/Mod/MeshPart/App/Mesher.cpp
+++ b/src/Mod/MeshPart/App/Mesher.cpp
@@ -41,11 +41,12 @@
 # pragma clang diagnostic ignored "-Woverloaded-virtual"
 #endif
 #include <SMESH_Gen.hxx>
+#include <SMESH_Mesh.hxx>
 #include <StdMeshers_MaxLength.hxx>
 #include <StdMeshers_LocalLength.hxx>
 #include <StdMeshers_NumberOfSegments.hxx>
 #include <StdMeshers_AutomaticLength.hxx>
-#include <StdMeshers_TrianglePreference.hxx>
+//#include <StdMeshers_TrianglePreference.hxx>
 #include <StdMeshers_MEFISTO_2D.hxx>
 #include <StdMeshers_Deflection1D.hxx>
 #include <StdMeshers_Arithmetic1D.hxx>
@@ -60,6 +61,7 @@
 #include <NETGENPlugin_NETGEN_2D.hxx>
 #include <NETGENPlugin_Hypothesis_2D.hxx>
 #include <NETGENPlugin_SimpleHypothesis_2D.hxx>
+#include <SMESHDS_Mesh.hxx>
 #endif // HAVE_NETGEN
 #if defined(__clang__)
 # pragma clang diagnostic pop
@@ -311,7 +313,7 @@ Mesh::MeshObject* Mesher::createMesh() const
 #else
     std::list<SMESH_Hypothesis*> hypoth;
 
-    SMESH_Gen* meshgen = SMESH_Gen::get();
+    SMESH_Gen* meshgen = new SMESH_Gen();
     SMESH_Mesh* mesh = meshgen->CreateMesh(0, true);
     int hyp=0;
 
@@ -386,8 +388,8 @@ Mesh::MeshObject* Mesher::createMesh() const
             hypoth.push_back(hyp1d);
         }
 
-        StdMeshers_TrianglePreference* hyp2d_1 = new StdMeshers_TrianglePreference(hyp++,0,meshgen);
-        hypoth.push_back(hyp2d_1);
+//         StdMeshers_TrianglePreference* hyp2d_1 = new StdMeshers_TrianglePreference(hyp++,0,meshgen);
+//         hypoth.push_back(hyp2d_1);
         StdMeshers_MEFISTO_2D* alg2d = new StdMeshers_MEFISTO_2D(hyp++,0,meshgen);
         hypoth.push_back(alg2d);
     } break;
